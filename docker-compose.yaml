
---
x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.9.3}
  # build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    # The following line can be used to set a custom config file, stored in the local config folder
    # If you want to use it, outcomment it and replace airflow.cfg with the name of your config file
    # AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
    AIRFLOW_START_TIME: ${AIRFLOW_START_TIME}
    AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
    AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
    AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    MLFLOW_BUCKET: ${MLFLOW_BUCKET}
    MLFLOW_POSTGRES_PASS: ${MLFLOW_POSTGRES_PASS}
    MLFLOW_POSTGRES_USER: ${MLFLOW_POSTGRES_USER}
    PROJECT_NAME: ${PROJECT_NAME}
    S3_BUCKET_NAME: ${S3_BUCKET_NAME}

  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    - ${AIRFLOW_PROJ_DIR:-.}/mlflow_artifacts:/tmp/artifacts
    - ${AIRFLOW_PROJ_DIR:-.}/mlflow_mlruns:/tmp/mlruns


  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  redis:
    # Redis is limited to 7.2-bookworm due to licencing change
    # https://redis.io/blog/redis-adopts-dual-source-available-licensing/
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # ---------------------------------------------------------------------------
  # LOCALSTACK 
  # ---------------------------------------------------------------------------
  localstack:
    image: localstack/localstack:stable
    container_name: localstack
    # env_file:
    #   - .env
    ports:
      - "4566-4597:4566-4597"
    environment:
      - SERVICES=s3,iam
      - DEBUG=1
      - PERSISTENCE=1
      - BUCKET_NAME=${S3_BUCKET_NAME}
      - REGION_NAME=${AWS_DEFAULT_REGION}
    volumes:
      # - ./localstack_s3/init:/etc/localstack/init/ready.d
      - s3-localstack-volume:/var/lib/localstack
    # networks:
    #   - mlops-zoomcamp-network
    healthcheck:
      test: ["CMD", "awslocal", "s3", "ls"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  localstack_s3_client:
    build:
      context: ./localstack_s3_client
      dockerfile: Dockerfile
    depends_on:
      localstack:
        condition: service_healthy
    environment:
      - AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
      - AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - MLFLOW_BUCKET=${MLFLOW_BUCKET}
    volumes:
      - ./localstack_s3_client:/app
  
  # ---------------------------------------------------------------------------

  # ---------------------------------------------------------------------------
  # POSRTGRES NYC
  # ---------------------------------------------------------------------------

  postgresnyc:
    image: postgres:latest
    environment:
      - POSTGRES_USER=${NYC_POSTGRES_USERNAME:-nycpostgres}
      - POSTGRES_PASSWORD=${NYC_POSTGRES_PASSWORD:-nycpostgres}
      - POSTGRES_DB=${NYC_POSTGRES_DATABASE:-nycpostgres}
    volumes: 
      - postgres-nyc-volume:/var/lib/postgresql/data
      - ./postgresnyc/init/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${NYC_POSTGRES_USERNAME:-nycpostgres} -d ${NYC_POSTGRES_DATABASE:-nycpostgres}'"]
      interval: 10s
      timeout: 3s
      retries: 3

  # ---------------------------------------------------------------------------


  # ---------------------------------------------------------------------------
  # MLFLOW
  # ---------------------------------------------------------------------------
  mlflow:
    build:
      context: mlflow
      dockerfile: Dockerfile
    ports:
      - ${MLFLOW_PORT}:5000
    environment:
      # - MLFLOW_DEFAULT_ARTIFACT_ROOT=s3://${MLFLOW_BUCKET}/${PROJECT_NAME}/artifacts
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/tmp/artifacts
      - AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
      - MLFLOW_BACKEND_STORE_URI=postgresql://${MLFLOW_POSTGRES_USER}:${MLFLOW_POSTGRES_PASS}@postgresmlflow:5432/mlflow
      # - MLFLOW_ARTIFACT_STORE=s3://${MLFLOW_BUCKET}/${PROJECT_NAME}/artifacts
      # - MLFLOW_S3_ENDPOINT_URL=http://localstack:4566
      - POSTGRES_USER=$MLFLOW_POSTGRES_USER
      - POSTGRES_PASSWORD=$MLFLOW_POSTGRES_PASS
      - POSTGRES_DB=mlflow
    depends_on:
      localstack:
        condition: service_healthy
      postgresmlflow:
        condition: service_healthy
    volumes:
      - ./mlflow/mlruns:/tmp/mlruns
      - ./mlflow/artifacts:/tmp/artifacts
      - ./mlflow/home:/home/mlflow
    # networks:
    #   - app-network

  postgresmlflow:
    image: postgres:latest
    environment:
      - POSTGRES_USER=$MLFLOW_POSTGRES_USER
      - POSTGRES_PASSWORD=$MLFLOW_POSTGRES_PASS
      - POSTGRES_DB=mlflow
    volumes: 
      - postgres-mlflow-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${MLFLOW_POSTGRES_USER} -d mlflow'"]
      interval: 10s
      timeout: 3s
      retries: 3

  # ---------------------------------------------------------------------------

  flask-app:
    build:
      context: ./flask
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - S3_ENDPOINT_URL=http://localstack:4566
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - MODEL_S3_PATH="models/skmodels/best_model/model.pkl"
      - METADATA_S3_PATH="models/skmodels/best_model/model.json"
      - DV_S3_PATH="models/skmodels/best_model/dict_vectorizer.pkl"
    volumes:
      - ./flask:/app

  # ---------------------------------------------------------------------------

  postgresgrafana:
    image: postgres:latest
    environment:
      - POSTGRES_USER=grafana
      - POSTGRES_PASSWORD=grafana
      - POSTGRES_DB=grafana
    volumes: 
      - postgres-grafana-volume:/var/lib/postgresql/data
      - ./postgresgrafana/init/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U grafana -d grafana'"]
      interval: 10s
      timeout: 3s
      retries: 3

  grafana:
    image: grafana/grafana
    ports:
    - ${GRAFANA_PORT}:3000
    volumes:
      - ./grafana/config/grafana_datasources.yaml:/etc/grafana/provisioning/datasources/datasource.yaml:ro
      # - ./grafana/config/grafana_dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml:ro
      # - ./grafana/dashboards:/opt/grafana/dashboards
    depends_on:
      postgresgrafana:
        condition: service_healthy


  postgresprefect:
    image: postgres:15.2-alpine
    restart: always
    environment:
      - POSTGRES_USER=prefect
      - POSTGRES_PASSWORD=prefect
      - POSTGRES_DB=prefect
    expose:
      - 5432
    volumes: 
      - postgres-prefect-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U prefect -d prefect'"]
      interval: 10s
      timeout: 3s
      retries: 3


  ### Prefect Server API and UI
  prefectserver:
    image: prefecthq/prefect:2.11.5-python3.11
    restart: always
    volumes:
      - prefectserver-volume:/root/.prefect
      - ./prefectserver/test_server.py:/opt/prefect/test_server.py:ro

    entrypoint: ["/opt/prefect/entrypoint.sh", "prefect", "server", "start"]
    environment:
      - PREFECT_UI_URL=http://127.0.0.1:4200/api
      - PREFECT_API_URL=http://127.0.0.1:4200/api
      # If you want to access Prefect Server UI from anywhere other than the Docker host machine, you will need to change
      # PREFECT_UI_URL and PREFECT_API_URL to match the external hostname/IP of the host machine. For example:
      #- PREFECT_UI_URL=http://external-ip:4200/api
      #- PREFECT_API_URL=http://external-ip:4200/api
      - PREFECT_SERVER_API_HOST=0.0.0.0
      - PREFECT_API_DATABASE_CONNECTION_URL=postgresql+asyncpg://prefect:prefect@postgresprefect:5432/prefect
      # Uncomment the following line if you want to use the 'S3 Bucket' storage block instead of the older 'S3' storage
      # - EXTRA_PIP_PACKAGES=prefect-aws
    ports:
      - 4200:4200
    depends_on:
      postgresprefect:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python3 test_server.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s


  ## Prefect Agent
  agent:
    image: prefecthq/prefect:2.11.5-python3.11
    restart: always
    entrypoint: ["/opt/prefect/entrypoint.sh", "prefect", "agent", "start", "-q", "YOUR_WORK_QUEUE_NAME"]
    environment:
      - PREFECT_API_URL=http://prefectserver:4200/api
    #    Use PREFECT_API_KEY if connecting the agent to Prefect Cloud
    #  - PREFECT_API_KEY=YOUR_API_KEY
    depends_on:
      prefectserver:
        condition: service_healthy


#   dummydatagenerator:
#     build:
#       context: ./dummydatagenerator
#       dockerfile: Dockerfile
#     environment:
#       - START_TIME=$AIRFLOW_START_TIME
#       - WHILE_TRUE=False
#       - SEND_TIMEOUT=20
#       - AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
#       - AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
#       - AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
#       - S3_BUCKET_NAME=$S3_BUCKET_NAME
#       - POSTGREST_HOST=postgresgrafana
#       - POSTGREST_PORT=5432
#       - POSTGREST_USERNAME=$GRAFANA_POSTGRES_USER
#       - POSTGREST_PASSWORD=$GRAFANA_POSTGRES_PASS
#       - POSTGREST_DATABASE=grafana
#       - PREFECT_API_URL=http://prefectserver:4200/api
#     entrypoint: ["python3", "app.py"]
#     depends_on:
#       postgresgrafana:
#         condition: service_healthy
#       prefectserver:
#         condition: service_healthy
#       localstack:
#         condition: service_healthy




volumes:
  postgres-db-volume:
  postgres-mlflow-volume:
  postgres-grafana-volume:
  postgres-nyc-volume:
  s3-localstack-volume:
  prefectserver-volume:
  postgres-prefect-volume:

networks:
  backend-network:
